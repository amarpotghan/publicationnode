This is a NodeJS AngularJs POC.

1. NodeJS
NodeJS server is nothing but a Json API(REST), listens on the port 3001.
Server has following folder structure.

lib/
routes/
test/
views/
app.js
router.js
start.js
Makefile
package.json

1. Start.js

This is a config script to start and configure node application. We have saparated out config from start file. Also we have maintained routers logic in the router.js file so that
it is now easily maintainable.

2.app.js

This is a NodeJs/ExpressJS Application configuration file. It configures app with fllowing parameters:
    a. Static Directory Path
    b. Server PORT
    c. Logger
    d. router
    e. Post request body parser
    f. ErrorHandler
    g. Server

3. router.js

Every server request is routed through this class. This handles various server requests. For now it handles three requests.

 1. Login (url='/api/login')
 2. TreeStructure (url='/api/treeStruct')
 3. DirectoryToJson (url='/api/getDirectory')

 Responsibility of router is to route request listened by server to various routes. In here...

 '/api/login','/api/treeStruct/','/api/getDirectory' requests are handled by DirectoryRouter.

 4. Routes
    -ApiRouter.js
        This is a router to handle all api requests. This again calls desired service to compute response.

 5. lib/Services
    -DirectoryToJson.js
        This service creates Json object of given directory using Directory model.

 6. Tests
    This contains all the BDD and TDD tests. Mocha (Unit testing Framework for NodeJS is configured to run the tests)
    
    
[19:17:18] Prateek Sarve: AngularJS Document Related to AngularJS – NodeJS POC

AngularJS: AngularJS is nothing but a javascript framework on front end side which supports two-way binding, composite views etc features. It has following structure.
v app
Ø css
§ All Css files
Ø images
Ø js
§ controllers
§ directives
§ filters
§ services
§ util
§ app.js
Ø lib
§ angular
• angular.js
Ø views
§ All html composite views
Ø index.html

Application flow is as given below:
• Very first the index.html gets loaded from the server which has the script files related to angular lib files and Bootstrap for the ui of bootstrap.
• It contains the attribute called as ng-app=”appName”  inside the core <html> tag which indicates the browser that it’s an Angular application and so thus the application gets initialized. It also has the <ng-view> which loads all the pages whenever URL changes.
• Now the app.js file which is included in index.html file gets loaded which contains the definition of the Angular Module with the appName provided in the ng-app attribute. It also contains the route information which lets us decide on the basis of URL which view & controller needs to be activated.
• Now in this case we have mentioned the URL is anything except /home should redirect to Login View hence login view gets loaded with the login controller in action.
• User enters the credentials and clicks on login which will have following flow
 		Please refer docx file attached for block diagrams
• On the basis of the result from backend, user will get redirected to #/home and hence the home.html gets loaded with TreeController in action as mentioned in the app.js file.
• Now the 
 
	Please refer docx file attached for block diagrams
• Now on the click of any of the files in tree the addTab() function in the tree controller gets called which calls TabService which in turn calls the TabUtils class where the logic of adding tabs on the right hand side panel is written.

